<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://nasibnaimi.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nasibnaimi.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-17T21:38:37+00:00</updated><id>https://nasibnaimi.com/feed.xml</id><title type="html">blank</title><subtitle>a personal website for sharing stuff with the outside world. </subtitle><entry><title type="html">high performance computing - a practical guide</title><link href="https://nasibnaimi.com/blog/2024/hpc-lab/" rel="alternate" type="text/html" title="high performance computing - a practical guide"/><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><id>https://nasibnaimi.com/blog/2024/hpc-lab</id><content type="html" xml:base="https://nasibnaimi.com/blog/2024/hpc-lab/"><![CDATA[<h2 id="introduction-to-hpc">Introduction to HPC</h2> <p>High-Performance Computing (HPC) combines computational resources to deliver high computational power for solving complex problems. Modern HPC systems, often called supercomputers, can perform quadrillions of calculations per second.</p> <h3 id="key-concepts">Key Concepts</h3> <ol> <li><strong>Parallel Computing</strong>: Multiple processors working simultaneously</li> <li><strong>Distributed Computing</strong>: Computations spread across multiple machines</li> <li><strong>Scalability</strong>: Ability to handle increased workload with additional resources</li> <li><strong>Performance Metrics</strong>: <ul> <li>FLOPS (Floating Point Operations Per Second)</li> <li>Memory bandwidth</li> <li>Network latency and throughput</li> </ul> </li> </ol> <h2 id="hpc-architecture">HPC Architecture</h2> <h3 id="hardware-components">Hardware Components</h3> <ol> <li><strong>Compute Nodes</strong> <ul> <li>CPUs (multi-core processors)</li> <li>GPUs (for accelerated computing)</li> <li>Memory (RAM)</li> <li>Local storage</li> </ul> </li> <li><strong>Network Infrastructure</strong> <ul> <li>High-speed interconnects (InfiniBand, OmniPath)</li> <li>Network topology</li> <li>Bandwidth and latency considerations</li> </ul> </li> <li><strong>Storage Systems</strong> <ul> <li>Parallel file systems (Lustre, GPFS)</li> <li>Hierarchical storage management</li> <li>Burst buffers</li> </ul> </li> </ol> <h3 id="memory-hierarchy">Memory Hierarchy</h3> <ol> <li><strong>Registers</strong>: Fastest, smallest capacity</li> <li><strong>Cache Levels</strong>: L1, L2, L3</li> <li><strong>Main Memory (RAM)</strong></li> <li><strong>Local Storage</strong></li> <li><strong>Network Storage</strong></li> </ol> <h2 id="eth-hpc-environment">ETH HPC Environment</h2> <h3 id="accessing-eth-clusters">Accessing ETH Clusters</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># To access euler cluster make sure to be in ETHZ Network using VPN</span>
ssh &lt;user_name&gt;@euler.ethz.ch
</code></pre></div></div> <p>This connects you to the login node which manages basic cluster administration. Here, you should only <strong>compile and run small programs</strong> for testing. Large jobs should run on compute nodes using the batch system.</p> <h3 id="software-stack-management">Software Stack Management</h3> <p>ETH clusters provide multiple software stacks:</p> <ul> <li>The old stack uses environment modules</li> <li>The <a href="https://scicomp.ethz.ch/wiki/New_SPACK_software_stack_on_Euler">new stack</a> uses LMOD modules</li> </ul> <p>Switch to the new stack using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>env2lmod
</code></pre></div></div> <h3 id="practical-job-management">Practical Job Management</h3> <h4 id="job-submission-examples">Job Submission Examples</h4> <ol> <li><strong>Basic Job</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bsub <span class="nt">-W</span> 01:00 <span class="nt">-n</span> 1 ./my_program
</code></pre></div> </div> </li> <li><strong>Multi-node OpenMP</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">OMP_NUM_THREADS</span><span class="o">=</span>8
bsub <span class="nt">-n</span> 8 <span class="nt">-R</span> <span class="s2">"span[ptile=8]"</span> <span class="nt">-W</span> 01:00 ./omp_program
</code></pre></div> </div> </li> <li><strong>MPI with Resource Requirements</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bsub <span class="nt">-n</span> 16 <span class="nt">-R</span> <span class="s2">"rusage[mem=4096]"</span> <span class="nt">-W</span> 02:00 mpirun ./mpi_program
</code></pre></div> </div> </li> </ol> <h4 id="job-monitoring-and-control">Job Monitoring and Control</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List all jobs</span>
bjobs <span class="o">[</span>options] <span class="o">[</span>JobID]
    <span class="nt">-l</span>        <span class="c"># Long format</span>
    <span class="nt">-w</span>        <span class="c"># Wide format</span>
    <span class="nt">-p</span>        <span class="c"># Show pending jobs</span>
    <span class="nt">-r</span>        <span class="c"># Show running jobs</span>

<span class="c"># Detailed resource usage</span>
bbjobs <span class="o">[</span>options] <span class="o">[</span>JobID]
    <span class="nt">-l</span>        <span class="c"># Log format</span>
    <span class="nt">-f</span>        <span class="c"># Show CPU affinity</span>

<span class="c"># Connect to running job</span>
bjob_connect &lt;JOBID&gt;

<span class="c"># Kill jobs</span>
bkill &lt;jobID&gt;    <span class="c"># Kill specific job</span>
bkill 0          <span class="c"># Kill all your jobs</span>
</code></pre></div></div> <h2 id="matrix-multiplication-case-study">Matrix Multiplication Case Study</h2> <h3 id="memory-hierarchy-impact">Memory Hierarchy Impact</h3> <p>Modern processors handle floating point operations very efficiently:</p> <ul> <li>Addition: typically 1 cycle</li> <li>Multiplication: 1-2 cycles</li> <li>Memory access: can take hundreds of cycles</li> </ul> <p>This makes memory access optimization critical for performance.</p> <h3 id="blocked-matrix-multiplication">Blocked Matrix Multiplication</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Cache-friendly blocked implementation</span>
<span class="kt">void</span> <span class="nf">matrix_multiply_blocked</span><span class="p">(</span><span class="kt">float</span><span class="o">*</span> <span class="n">A</span><span class="p">,</span> <span class="kt">float</span><span class="o">*</span> <span class="n">B</span><span class="p">,</span> <span class="kt">float</span><span class="o">*</span> <span class="n">C</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="kt">int</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">k</span> <span class="o">+=</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// Block multiplication</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">ii</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span> <span class="n">ii</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span> <span class="n">jj</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span> <span class="n">jj</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kt">float</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="n">ii</span><span class="o">*</span><span class="n">N</span> <span class="o">+</span> <span class="n">jj</span><span class="p">];</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">kk</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span> <span class="n">kk</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">(</span><span class="n">k</span><span class="o">+</span><span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span> <span class="n">kk</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                            <span class="n">sum</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">ii</span><span class="o">*</span><span class="n">N</span> <span class="o">+</span> <span class="n">kk</span><span class="p">]</span> <span class="o">*</span> <span class="n">B</span><span class="p">[</span><span class="n">kk</span><span class="o">*</span><span class="n">N</span> <span class="o">+</span> <span class="n">jj</span><span class="p">];</span>
                        <span class="p">}</span>
                        <span class="n">C</span><span class="p">[</span><span class="n">ii</span><span class="o">*</span><span class="n">N</span> <span class="o">+</span> <span class="n">jj</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="performance-analysis">Performance Analysis</h3> <p>Key findings from our matrix multiplication study:</p> <ol> <li>Cache utilization is critical for performance</li> <li>Blocked algorithms can significantly reduce memory access</li> <li>Proper block size selection depends on cache size</li> <li>BLAS libraries implement these optimizations internally</li> </ol> <h2 id="performance-optimization">Performance Optimization</h2> <h3 id="memory-optimization">Memory Optimization</h3> <ol> <li><strong>Cache Optimization</strong> <ul> <li>Data alignment</li> <li>Cache line utilization</li> <li>Stride optimization</li> </ul> </li> <li><strong>Memory Access Patterns</strong> <ul> <li>Sequential access</li> <li>Blocked algorithms</li> <li>Vectorization</li> </ul> </li> </ol> <h3 id="parallel-optimization">Parallel Optimization</h3> <ol> <li><strong>Load Balancing</strong> <ul> <li>Even distribution of work</li> <li>Dynamic scheduling</li> <li>Work stealing</li> </ul> </li> <li><strong>Communication Optimization</strong> <ul> <li>Minimize message passing</li> <li>Overlap computation and communication</li> <li>Use collective operations</li> </ul> </li> </ol> <h3 id="code-examples">Code Examples</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example: Cache-friendly matrix multiplication</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">k</span> <span class="o">+=</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Block multiplication</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">ii</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span> <span class="n">ii</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span> <span class="n">jj</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span> <span class="n">jj</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">float</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="n">ii</span><span class="p">][</span><span class="n">jj</span><span class="p">];</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">kk</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span> <span class="n">kk</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">(</span><span class="n">k</span><span class="o">+</span><span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span> <span class="n">kk</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">sum</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">ii</span><span class="p">][</span><span class="n">kk</span><span class="p">]</span> <span class="o">*</span> <span class="n">B</span><span class="p">[</span><span class="n">kk</span><span class="p">][</span><span class="n">jj</span><span class="p">];</span>
                    <span class="p">}</span>
                    <span class="n">C</span><span class="p">[</span><span class="n">ii</span><span class="p">][</span><span class="n">jj</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="modern-hpc-trends">Modern HPC Trends</h2> <h3 id="cloud-hpc">Cloud HPC</h3> <ol> <li><strong>Benefits</strong> <ul> <li>Scalability</li> <li>Pay-per-use</li> <li>Quick provisioning</li> </ul> </li> <li><strong>Challenges</strong> <ul> <li>Network performance</li> <li>Cost management</li> <li>Data security</li> </ul> </li> </ol> <h3 id="ai-and-hpc-convergence">AI and HPC Convergence</h3> <ol> <li><strong>AI Workloads</strong> <ul> <li>Deep learning training</li> <li>Large language models</li> <li>AI-assisted simulations</li> </ul> </li> <li><strong>Hardware Acceleration</strong> <ul> <li>GPUs</li> <li>TPUs</li> <li>FPGAs</li> </ul> </li> </ol> <h3 id="container-technologies">Container Technologies</h3> <ol> <li><strong>Singularity/Apptainer</strong> <ul> <li>HPC-specific containers</li> <li>Security features</li> <li>MPI support</li> </ul> </li> <li><strong>Docker in HPC</strong> <ul> <li>Development workflows</li> <li>CI/CD pipelines</li> <li>Testing environments</li> </ul> </li> </ol> <h2 id="best-practices-and-tools">Best Practices and Tools</h2> <h3 id="development-tools">Development Tools</h3> <ol> <li><strong>Compilers</strong> <ul> <li>GCC, Intel, NVIDIA</li> <li>Optimization flags</li> <li>Vectorization reports</li> </ul> </li> <li><strong>Debuggers</strong> <ul> <li>GDB, DDT, TotalView</li> <li>Memory checkers</li> <li>Thread analyzers</li> </ul> </li> <li><strong>Profilers</strong> <ul> <li>Intel VTune</li> <li>NVIDIA NSight</li> <li>TAU</li> </ul> </li> </ol> <h3 id="performance-analysis-1">Performance Analysis</h3> <ol> <li><strong>Metrics</strong> <ul> <li>Strong scaling</li> <li>Weak scaling</li> <li>Parallel efficiency</li> </ul> </li> <li><strong>Benchmarking</strong> <ul> <li>STREAM</li> <li>LINPACK</li> <li>Application-specific benchmarks</li> </ul> </li> </ol> <h3 id="resource-management">Resource Management</h3> <ol> <li><strong>Module System</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module avail           <span class="c"># List available modules</span>
module load compiler   <span class="c"># Load specific module</span>
module list           <span class="c"># Show loaded modules</span>
module purge         <span class="c"># Unload all modules</span>
</code></pre></div> </div> </li> <li><strong>Environment Setup</strong> <ul> <li>Compiler selection</li> <li>Library paths</li> <li>Runtime configurations</li> </ul> </li> </ol> <h2 id="references">References</h2> <ol> <li>Introduction to High Performance Computing for Scientists and Engineers</li> <li>Parallel Programming for Science and Engineering</li> <li>The Art of High Performance Computing</li> <li><a href="https://www.top500.org/">TOP500 Supercomputer Sites</a></li> <li><a href="https://scicomp.ethz.ch/">ETH Zurich Scientific Computing Wiki</a></li> <li><a href="https://www.cse-lab.ethz.ch/teaching/hpcse-i_hs22/">ETH HPC Lab Course Materials</a></li> </ol>]]></content><author><name>Nasib Naimi</name></author><category term="code"/><summary type="html"><![CDATA[A comprehensive guide to High Performance Computing concepts, architectures, and best practices, with hands-on examples from ETH HPC Lab]]></summary></entry><entry><title type="html">some git stuff to remember</title><link href="https://nasibnaimi.com/blog/2024/git-pain/" rel="alternate" type="text/html" title="some git stuff to remember"/><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><id>https://nasibnaimi.com/blog/2024/git-pain</id><content type="html" xml:base="https://nasibnaimi.com/blog/2024/git-pain/"><![CDATA[<h2 id="history-manipulation">History Manipulation</h2> <h3 id="interactive-rebase-operations">Interactive Rebase Operations</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Rewrite multiple commits</span>
git rebase <span class="nt">-i</span> HEAD~5  <span class="c"># Last 5 commits</span>

<span class="c"># Common operations:</span>
<span class="c"># fixup - combine with previous commit, discard message</span>
<span class="c"># squash - combine with previous, keep both messages</span>
<span class="c"># reword - change commit message</span>
<span class="c"># drop - remove commit entirely</span>
<span class="c"># edit - stop for amending</span>

<span class="c"># Force push with lease (safer than force push)</span>
git push <span class="nt">--force-with-lease</span>  <span class="c"># Fails if remote has new commits</span>
</code></pre></div></div> <h3 id="cherry-picking-and-patching">Cherry-picking and Patching</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Cherry-pick specific commits</span>
git cherry-pick &lt;commit-hash&gt;  <span class="c"># Single commit</span>
git cherry-pick &lt;hash1&gt;..&lt;hash2&gt;  <span class="c"># Range of commits</span>

<span class="c"># Create patch files</span>
git format-patch <span class="nt">-1</span> HEAD  <span class="c"># Last commit</span>
git format-patch <span class="nt">-n</span> &lt;commit&gt;  <span class="c"># Last n commits</span>
git format-patch master..feature  <span class="c"># Branch differences</span>

<span class="c"># Apply patches</span>
git apply <span class="nt">--check</span> my.patch  <span class="c"># Test if patch applies</span>
git am &lt; my.patch  <span class="c"># Apply patch with commit info</span>
</code></pre></div></div> <h2 id="recovery-operations">Recovery Operations</h2> <h3 id="recovering-lost-work">Recovering Lost Work</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Find lost commits (after reset --hard)</span>
git reflog
git checkout <span class="nt">-b</span> recovery-branch &lt;<span class="nb">hash</span><span class="o">&gt;</span>

<span class="c"># Recover deleted branch</span>
git reflog | <span class="nb">grep</span> <span class="nt">-A</span> 1 <span class="s1">'to &lt;branch-name&gt;'</span>
git checkout <span class="nt">-b</span> &lt;branch-name&gt; &lt;<span class="nb">hash</span><span class="o">&gt;</span>

<span class="c"># Recover stashed changes</span>
git fsck <span class="nt">--unreachable</span> | <span class="nb">grep </span>commit | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">' '</span> <span class="nt">-f3</span> | xargs git show
</code></pre></div></div> <h3 id="advanced-reset-operations">Advanced Reset Operations</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Reset specific paths</span>
git reset <span class="nt">--hard</span> origin/master <span class="nt">--</span> path/to/file

<span class="c"># Clean working directory but keep specific files</span>
git stash <span class="nt">--keep-index</span>
git stash drop

<span class="c"># Unstage parts of a file</span>
git reset <span class="nt">-p</span> HEAD &lt;file&gt;
</code></pre></div></div> <h2 id="advanced-workflows">Advanced Workflows</h2> <h3 id="bisect-for-bug-hunting">Bisect for Bug Hunting</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git bisect start
git bisect bad  <span class="c"># Current commit is broken</span>
git bisect good &lt;commit&gt;  <span class="c"># Last known good commit</span>

<span class="c"># Automate with test script</span>
git bisect run ./test-script.sh

<span class="c"># After finding the culprit</span>
git bisect reset
</code></pre></div></div> <h3 id="worktrees-for-multiple-checkouts">Worktrees for Multiple Checkouts</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create new worktree</span>
git worktree add ../path/to/folder branch-name

<span class="c"># List worktrees</span>
git worktree list

<span class="c"># Remove worktree</span>
git worktree remove ../path/to/folder
</code></pre></div></div> <h3 id="advanced-merge-strategies">Advanced Merge Strategies</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Recursive strategy with options</span>
git merge <span class="nt">-X</span> ignore-space-change feature
git merge <span class="nt">-X</span> theirs feature  <span class="c"># Prefer their changes</span>
git merge <span class="nt">-X</span> patience feature  <span class="c"># Better handling of renamed files</span>

<span class="c"># Octopus merge (multiple branches)</span>
git merge branch1 branch2 branch3
</code></pre></div></div> <h2 id="git-hooks-and-automation">Git Hooks and Automation</h2> <h3 id="advanced-pre-commit-configuration">Advanced Pre-commit Configuration</h3> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># .pre-commit-config.yaml</span>
<span class="na">default_language_version</span><span class="pi">:</span>
    <span class="na">python</span><span class="pi">:</span> <span class="s">python3.9</span>
<span class="na">default_stages</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">commit</span><span class="pi">,</span> <span class="nv">push</span><span class="pi">]</span>
<span class="na">fail_fast</span><span class="pi">:</span> <span class="kc">true</span>

<span class="na">repos</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">repo</span><span class="pi">:</span> <span class="s">local</span>
    <span class="na">hooks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">custom-script</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">Custom Validation</span>
        <span class="na">entry</span><span class="pi">:</span> <span class="s">./scripts/validate.sh</span>
        <span class="na">language</span><span class="pi">:</span> <span class="s">script</span>
        <span class="na">files</span><span class="pi">:</span> <span class="s">\\.py$</span>
        <span class="na">stages</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">commit</span><span class="pi">]</span>
        <span class="na">additional_dependencies</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">pytest'</span><span class="pi">]</span>

  <span class="pi">-</span> <span class="na">repo</span><span class="pi">:</span> <span class="s">https://github.com/psf/black</span>
    <span class="na">rev</span><span class="pi">:</span> <span class="s">22.10.0</span>
    <span class="na">hooks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">black</span>
        <span class="na">args</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">--check'</span><span class="pi">]</span>
        <span class="na">exclude</span><span class="pi">:</span> <span class="s">^(venv/|docs/)</span>

  <span class="pi">-</span> <span class="na">repo</span><span class="pi">:</span> <span class="s">https://github.com/pre-commit/mirrors-mypy</span>
    <span class="na">rev</span><span class="pi">:</span> <span class="s">v0.982</span>
    <span class="na">hooks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">mypy</span>
        <span class="na">additional_dependencies</span><span class="pi">:</span> 
          <span class="pi">-</span> <span class="s1">'</span><span class="s">types-requests'</span>
          <span class="pi">-</span> <span class="s1">'</span><span class="s">types-PyYAML'</span>
</code></pre></div></div> <h3 id="custom-git-hooks">Custom Git Hooks</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># .git/hooks/pre-push</span>

<span class="nv">protected_branches</span><span class="o">=(</span><span class="s1">'main'</span> <span class="s1">'master'</span> <span class="s1">'production'</span><span class="o">)</span>
<span class="nv">current_branch</span><span class="o">=</span><span class="si">$(</span>git symbolic-ref HEAD | <span class="nb">sed</span> <span class="nt">-e</span> <span class="s1">'s,.*/\(.*\),\1,'</span><span class="si">)</span>

<span class="k">for </span>branch <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">protected_branches</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    if</span> <span class="o">[[</span> <span class="nv">$current_branch</span> <span class="o">=</span> <span class="nv">$branch</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"You're about to push to </span><span class="nv">$branch</span><span class="s2">, is that what you intended? [y|n] "</span> <span class="nt">-n</span> 1 <span class="nt">-r</span> &lt; /dev/tty
        <span class="nb">echo
        </span><span class="k">if </span><span class="nb">echo</span> <span class="nv">$REPLY</span> | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'^[Nn]$'</span> <span class="o">&gt;</span> /dev/null<span class="p">;</span> <span class="k">then
            </span><span class="nb">exit </span>1
        <span class="k">fi
    fi
done
</span><span class="nb">exit </span>0
</code></pre></div></div> <h2 id="submodules-and-subtrees">Submodules and Subtrees</h2> <h3 id="advanced-submodule-operations">Advanced Submodule Operations</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Update specific submodule to latest</span>
git submodule update <span class="nt">--remote</span> <span class="nt">--merge</span> specific-submodule

<span class="c"># Execute command in each submodule</span>
git submodule foreach <span class="s1">'git checkout -b feature'</span>

<span class="c"># Remove a submodule</span>
git submodule deinit <span class="nt">-f</span> path/to/submodule
git <span class="nb">rm</span> <span class="nt">-f</span> path/to/submodule
<span class="nb">rm</span> <span class="nt">-rf</span> .git/modules/path/to/submodule
</code></pre></div></div> <h3 id="git-subtree-alternative-to-submodules">Git Subtree (Alternative to Submodules)</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Add subtree</span>
git subtree add <span class="nt">--prefix</span><span class="o">=</span>lib/core https://github.com/org/lib.git master

<span class="c"># Update subtree</span>
git subtree pull <span class="nt">--prefix</span><span class="o">=</span>lib/core https://github.com/org/lib.git master

<span class="c"># Push changes back to subtree remote</span>
git subtree push <span class="nt">--prefix</span><span class="o">=</span>lib/core https://github.com/org/lib.git master
</code></pre></div></div> <h3 id="debugging-git-issues">Debugging Git Issues</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Debug git commands</span>
<span class="nv">GIT_TRACE</span><span class="o">=</span>1 git push origin master

<span class="c"># Debug specific areas</span>
<span class="nv">GIT_TRACE_PACKET</span><span class="o">=</span>1  <span class="c"># Network operations</span>
<span class="nv">GIT_TRACE_PERFORMANCE</span><span class="o">=</span>1  <span class="c"># Performance data</span>
<span class="nv">GIT_TRACE_SETUP</span><span class="o">=</span>1  <span class="c"># Setup info</span>

<span class="c"># Find large files in history</span>
git rev-list <span class="nt">--objects</span> <span class="nt">--all</span> <span class="se">\</span>
  | git cat-file <span class="nt">--batch-check</span><span class="o">=</span><span class="s1">'%(objecttype) %(objectname) %(objectsize) %(rest)'</span> <span class="se">\</span>
  | <span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">'s/^blob //p'</span> <span class="se">\</span>
  | <span class="nb">sort</span> <span class="nt">-k2nr</span> <span class="se">\</span>
  | <span class="nb">head</span> <span class="nt">-10</span>
</code></pre></div></div> <h2 id="useful-resources">Useful Resources</h2> <ul> <li><a href="https://git-scm.com/doc">Git Documentation</a></li> <li><a href="https://cli.github.com/manual/">GitHub CLI Manual</a></li> <li><a href="https://pre-commit.com/">Pre-commit Framework</a></li> <li><a href="https://www.conventionalcommits.org/">Conventional Commits</a></li> <li><a href="https://nvie.com/posts/a-successful-git-branching-model/">Git Flow</a></li> <li><a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain">Git Internal Files</a></li> <li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">Advanced Git Configuration</a></li> <li><a href="https://git-scm.com/docs/gitattributes">Git Attributes</a></li> <li><a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain">Git Plumbing Commands</a></li> </ul>]]></content><author><name>Nasib Naimi</name></author><category term="code"/><summary type="html"><![CDATA[solutions to tricky git situations and advanced git operations that are easy to forget]]></summary></entry><entry><title type="html">some software design principles</title><link href="https://nasibnaimi.com/blog/2024/software-design-principles/" rel="alternate" type="text/html" title="some software design principles"/><published>2024-03-20T00:00:00+00:00</published><updated>2024-03-20T00:00:00+00:00</updated><id>https://nasibnaimi.com/blog/2024/software-design-principles</id><content type="html" xml:base="https://nasibnaimi.com/blog/2024/software-design-principles/"><![CDATA[<p>Software design principles are guidelines that help us write better code. However, blindly following them can be as dangerous as ignoring them. Let’s explore these principles across different paradigms and understand when to apply them.</p> <h2 id="core-principles">Core Principles</h2> <h3 id="dry-vs-wet-vs-aha">DRY vs WET vs AHA</h3> <ul> <li><strong>DRY (Don’t Repeat Yourself)</strong> <ul> <li>Each piece of knowledge should have a single, unambiguous representation</li> <li>But beware: Sometimes duplication is better than the wrong abstraction</li> </ul> </li> <li><strong>WET (Write Everything Twice)</strong> <ul> <li>Wait until you need to write something three times before abstracting</li> <li>Helps avoid premature abstractions</li> <li>Also known as: Write Explicit Things</li> </ul> </li> <li><strong>AHA (Avoid Hasty Abstractions)</strong> <ul> <li>Prefer duplication over the wrong abstraction</li> <li>Wrong abstractions are more costly than duplication</li> <li>When in doubt, duplicate first, abstract later</li> </ul> </li> </ul> <h2 id="object-oriented-design">Object-Oriented Design</h2> <h3 id="gang-of-four-patterns">Gang of Four Patterns</h3> <p>Key patterns that remain relevant:</p> <ol> <li><strong>Creational Patterns</strong> <ul> <li>Factory Method: When object creation logic should be separate</li> <li>Builder: For complex object construction</li> <li>Singleton: When you genuinely need a single instance (rare!)</li> </ul> </li> <li><strong>Structural Patterns</strong> <ul> <li>Adapter: Interface compatibility</li> <li>Decorator: Dynamic behavior extension</li> <li>Composite: Tree structures</li> </ul> </li> <li><strong>Behavioral Patterns</strong> <ul> <li>Observer: Event handling</li> <li>Strategy: Interchangeable algorithms</li> <li>Command: Action encapsulation</li> </ul> </li> </ol> <h3 id="solid-principles">SOLID Principles</h3> <ol> <li><strong>Single Responsibility</strong> <ul> <li>A class should have one reason to change</li> <li>But don’t make classes too granular</li> </ul> </li> <li><strong>Open/Closed</strong> <ul> <li>Open for extension, closed for modification</li> <li>Use interfaces and composition</li> </ul> </li> <li><strong>Liskov Substitution</strong> <ul> <li>Subtypes must be substitutable for their base types</li> <li>Avoid breaking inherited contracts</li> </ul> </li> <li><strong>Interface Segregation</strong> <ul> <li>Many specific interfaces better than one general</li> <li>Keep interfaces focused and cohesive</li> </ul> </li> <li><strong>Dependency Inversion</strong> <ul> <li>Depend on abstractions, not concretions</li> <li>Use dependency injection</li> </ul> </li> </ol> <h2 id="functional-design">Functional Design</h2> <h3 id="core-fp-principles">Core FP Principles</h3> <ol> <li><strong>Immutability</strong> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Instead of modifying
</span><span class="k">def</span> <span class="nf">add_item</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
    <span class="nb">list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>  <span class="c1"># Mutates list
</span>   
<span class="c1"># Create new instance
</span><span class="k">def</span> <span class="nf">add_item</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">list</span> <span class="o">+</span> <span class="p">[</span><span class="n">item</span><span class="p">]</span>  <span class="c1"># Returns new list
</span></code></pre></div> </div> </li> <li><strong>Pure Functions</strong> <ul> <li>Same input → Same output</li> <li>No side effects</li> <li>Easier to test and reason about</li> </ul> </li> <li><strong>Function Composition</strong> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compose functions
</span><span class="k">def</span> <span class="nf">process_data</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">data</span>
        <span class="p">.</span><span class="nf">pipe</span><span class="p">(</span><span class="n">clean</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">pipe</span><span class="p">(</span><span class="n">transform</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">pipe</span><span class="p">(</span><span class="n">validate</span><span class="p">))</span>
</code></pre></div> </div> </li> <li><strong>Higher-Order Functions</strong> <ul> <li>Functions that take/return functions</li> <li>Enable powerful abstractions</li> </ul> </li> </ol> <h3 id="functional-patterns">Functional Patterns</h3> <ol> <li><strong>Monads</strong> <ul> <li>For handling side effects</li> <li>Example: Option/Maybe type</li> </ul> </li> <li><strong>Functors</strong> <ul> <li>Mappable containers</li> <li>Lists, Trees, Promises</li> </ul> </li> <li><strong>Pattern Matching</strong> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">match</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">case</span> <span class="p">{</span><span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="n">name</span><span class="p">}:</span>
            <span class="k">return</span> <span class="nf">handle_user</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="n">case</span> <span class="p">{</span><span class="sh">'</span><span class="s">type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">admin</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">:</span> <span class="nb">id</span><span class="p">}:</span>
            <span class="k">return</span> <span class="nf">handle_admin</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</code></pre></div> </div> </li> </ol> <h2 id="pragmatic-approaches">Pragmatic Approaches</h2> <p>From “The Pragmatic Programmer”:</p> <ol> <li><strong>Orthogonality</strong> <ul> <li>Keep things independent</li> <li>Changes should be localized</li> </ul> </li> <li><strong>Tracer Bullets</strong> <ul> <li>Get basic end-to-end functionality working first</li> <li>Iterate and improve</li> </ul> </li> <li><strong>Good Enough Software</strong> <ul> <li>Perfect is the enemy of good</li> <li>Know when to stop</li> </ul> </li> <li><strong>Don’t Live with Broken Windows</strong> <ul> <li>Fix small problems before they become big</li> <li>Maintain code quality consistently</li> </ul> </li> </ol> <h2 id="when-to-break-the-rules">When to Break the Rules</h2> <ol> <li><strong>Duplication Over Wrong Abstraction</strong> <ul> <li>When the abstraction would couple unrelated concepts</li> <li>When the duplication is simpler to understand</li> </ul> </li> <li><strong>Performance Requirements</strong> <ul> <li>When principles conflict with performance needs</li> <li>Document why you broke the rule</li> </ul> </li> <li><strong>Prototyping</strong> <ul> <li>When exploring solutions</li> <li>When speed of development &gt; maintainability</li> </ul> </li> <li><strong>Legacy Code</strong> <ul> <li>When changes would be too risky</li> <li>When the cost outweighs the benefit</li> </ul> </li> </ol> <h2 id="modern-perspectives">Modern Perspectives</h2> <ol> <li><strong>Domain-Driven Design</strong> <ul> <li>Align code with business domain</li> <li>Use ubiquitous language</li> </ul> </li> <li><strong>Microservices Architecture</strong> <ul> <li>Service boundaries based on business capabilities</li> <li>Independent deployability</li> </ul> </li> <li><strong>Event-Driven Architecture</strong> <ul> <li>Loose coupling through events</li> <li>Reactive systems</li> </ul> </li> </ol> <h2 id="practical-tips">Practical Tips</h2> <ol> <li><strong>Start Simple</strong> <ul> <li>Don’t over-engineer</li> <li>Add complexity only when needed</li> </ul> </li> <li><strong>Consider Context</strong> <ul> <li>Team size and experience</li> <li>Project constraints</li> <li>Business requirements</li> </ul> </li> <li><strong>Measure Impact</strong> <ul> <li>Monitor technical debt</li> <li>Track maintenance costs</li> <li>Evaluate refactoring ROI</li> </ul> </li> </ol> <h2 id="references">References</h2> <ul> <li>“Design Patterns” by Gamma, Helm, Johnson, Vlissides</li> <li>“The Pragmatic Programmer” by Hunt and Thomas</li> <li>“Clean Code” by Robert C. Martin</li> <li>“Domain-Driven Design” by Eric Evans</li> <li>“Functional Programming in Scala” by Chiusano and Bjarnason</li> </ul>]]></content><author><name>Nasib Naimi</name></author><category term="code"/><category term="principles"/><category term="design-patterns"/><category term="functional-programming"/><category term="object-oriented"/><category term="pragmatic-programming"/><summary type="html"><![CDATA[a simple guide to software design principles from OOP to Functional Programming]]></summary></entry><entry><title type="html">how to read academic papers</title><link href="https://nasibnaimi.com/blog/2023/how-to-read-papers/" rel="alternate" type="text/html" title="how to read academic papers"/><published>2023-08-20T00:00:00+00:00</published><updated>2023-08-20T00:00:00+00:00</updated><id>https://nasibnaimi.com/blog/2023/how-to-read-papers</id><content type="html" xml:base="https://nasibnaimi.com/blog/2023/how-to-read-papers/"><![CDATA[<h2 id="why-should-you-bother">Why should you bother?</h2> <p>Reading academic papers is time consuming and sometimes frustrating. Information is dense, sometimes we lack context, or the paper is just not written very well. This guide is more of a checklist I developed through a bit of research online, on how to get through a paper efficiently, while extracting the most relevant content and understanding the concepts to the desired depth. Each step of the process has a bullet point list on what should be done for this step. If you have any further valuable tips on how to make the process even smoother, feel free to reach out to me and I will be sure to add them with the proper acknowledgements.</p> <h3 id="step-one-getting-a-general-idea-of-the-content">Step One; Getting a General Idea of the Content</h3> <p>Before reading a paper in depth, we want to get a general idea of what the topic is, how it approaches the topic, and whether it is relevant for the research being conducted. The goal is to get the necessary context before making the decision to read the paper or not. To do so, we can read the title, abstract, and conclusion of the paper in question. While reading it can be useful to identify the keywords for future reference. After having read through those sections, it can be decided whether or not the paper is relevant.</p> <ul> <li>Read title, abstract and conclusion</li> <li>Identify keywords</li> <li>Decide whether paper is relevant</li> </ul> <h3 id="step-two-getting-context">Step Two; Getting Context</h3> <p>Once we have decided whether or not this paper is of interest for us, we need to get familiar with more of the details. This can be thought of as acclimitization to the subject matter, which is the goal of this step. Knowledge acclimitization gives your brain the necessary context for understanding the rest of the paper in later passes. Once we know what to expect to a certain degree, our brain is primed to receive that knowledge and insights, making the absorption of the content much easier. To gain the necessary context before reading a paper, it is best to read the introduction and examine the tables and/or graphs.</p> <p>The introduction gives an overview of the high-level goal of the paper and why it is relevant by:</p> <ul> <li>Highlighting why this topic is of interest</li> <li>Explaining the problem domain, research scope, and prior research</li> <li>Highlighting necessary prerequisite knowledge</li> <li>Introducing the goal of the research</li> </ul> <p>The graphs and tables on the other hand, serve to get an understanding of what metrics are being used which helps to understand the contents of the paper better. They serve to provide support for the claims of the methods presented, thus give reader a better understanding as to whether these methods improve on current methods and to what extent. Furthermore, visual representation of data and performance enables an intuitive understanding of the contents.</p> <ul> <li>Read the Introduction</li> <li>Examine the Graphs, diagrams and figures</li> <li>Note anything that is unfamiliar or unknown for later reference</li> </ul> <h3 id="step-three-complete-readthrough">Step Three; Complete Readthrough</h3> <p>After having primed our brains for the paper by giving it the necessary context, the next step is to do a full pass of the paper, which means reading it all, end to end. In this step, it is important not to get hung up on things that we did not understand immediately and to leave them for later. In this first full pass, the goal is to understand most of what the paper is presenting and finding out which concepts, terms, formulas, derivations, or algorithms need to be looked at into more detail. In order not to lose sight of the full picture, these areas that require more time to be understood should be noted down for reference in step four but should not be dwelled on for long in step three. To read the full paper, it is usually best to start by reading the abstract and conclusion again before proceeding with the rest of the text and to take some quick notes per sections with short breaks in between the sections.</p> <ul> <li>Read abstract and conclusion</li> <li>Read entire text from introduction onwards <ul> <li>Skip over anything (equations, derivations, diagrams, etc.) too complex to understand on the first pass</li> <li>Take brief notes per section and short breaks between sections</li> </ul> </li> <li>Note all unfamiliar terms and concepts</li> <li>Note all the key insights and takeaways</li> </ul> <h3 id="step-four-final-pass">Step Four; Final Pass</h3> <p>In the final pass, the goal is to look into all unfamiliar terms, algorithms, definitions, concepts, and methods that were noted during the first full pass. It’s important to take enough time to thoroughly understand everything in this step, so that we can conclude the reading of this paper with a confident feeling of having understood the subject matter. Use any external resources that can aid in understanding such as: presentations, blogposts, articles, textbooks, etc. Also, refer to the cited papers for help finding the appropriate resources. Finding the right aids is the key factor in successfully completing step four.</p> <ul> <li>Go through each term, algorithm, definition, concept, etc. that was unfamiliar (see your notes)</li> <li>Research each of the unfamiliar parts until they have been understood</li> <li>Find external resoureces to aid comprehension</li> </ul> <p>Some useful places to look when it comes to machine learning research:</p> <p><strong><a href="https://www.reddit.com/r/MachineLearning/">The Machine Learning Subreddit</a></strong> <strong><a href="https://www.reddit.com/r/deeplearning/">The Deep Learning Subreddit</a></strong> <strong><a href="https://paperswithcode.com/">PapersWithCode</a></strong> <strong><a href="https://www.researchgate.net/">Research Gate</a></strong> <strong><a href="https://machinelearning.apple.com/">Machine Learning Apple</a></strong>s</p> <p>Top conferences: <strong><a href="https://papers.nips.cc/">NIPS</a></strong>, <strong><a href="https://icml.cc/">ICML</a></strong>, <strong><a href="https://iclr.cc/">ICLR</a></strong>, <strong><a href="https://cvpr2023.thecvf.com/">CVPR</a></strong></p> <h3 id="optional-step-five-summarizing-and-sharing">(Optional) Step Five; Summarizing and Sharing</h3> <p>Especially when delving into a new topic, in can be very helpful to solidify your knowledge by writing short summaries on the topics or papers being read. This practice really cements the new topics by employing the <strong><a href="https://en.wikipedia.org/wiki/Learning_by_teaching">feynman technique</a></strong>, where you attempt to draw on your knowledge to explain a novel concept in a comprehensive way to someone else. Writing summaries has the added benefit that they can be shared online through blogposts and serve as a reference for others when reading through similar material.</p> <h3 id="wrapping-up">Wrapping up</h3> <p>Reading research papers can be cumbersome, especially when you are new to it or to the topic. Having a structured approach can make it more manageable to take in the contents of more challenging papers but it is also important to note that knowledge acquisition takes time and should not be rushed. So take your time, remain focus and be sure to revisit more difficult concepts multiple times.</p> <p>To summarize, these are the steps recommended when reading a research paper:</p> <ul> <li>Identify a topic</li> <li>Find research papers on the topic</li> <li>Read title, abstract, and conclusion to gain a vague understanding of the research effort aims and achievements.</li> <li>Familiarize yourself with the content reading the introduction and examining figures and graphs presented in the paper.</li> <li>Read the entire paper, skipping over more challenging or unfamiliar parts and noting them for later.</li> <li>Research unfamiliar terms, terminologies, concepts, algorithms, formulas, derivations, and methods using external resources.</li> <li>(Optional) Summarize in your own words essential takeaways, definitions, and algorithms.</li> </ul> <h3 id="sources">Sources:</h3> <p>https://developer.nvidia.com/blog/how-to-read-research-papers-a-pragmatic-approach-for-ml-practitioners/</p> <p>https://www.turing.com/kb/how-to-write-research-paper-in-machine-learning-area</p>]]></content><author><name>Nasib Naimi</name></author><category term="academic"/><summary type="html"><![CDATA[A rough guide on how to read academic papers in a structured way.]]></summary></entry></feed>